(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{705:function(n,e,a){"use strict";a.r(e);var r=a(47),s=Object(r.a)({},(function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"реалізація-інформаціиного-та-програмного-забезпечення"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#реалізація-інформаціиного-та-програмного-забезпечення"}},[n._v("#")]),n._v(" Реалізація інформаційного та програмного забезпечення")]),n._v(" "),a("p",[n._v("В рамках проекту розробляється:")]),n._v(" "),a("ul",[a("li",[n._v("SQL-скрипт для створення на початкового наповнення бази даних")])]),n._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("-- MySQL Workbench Forward Engineering\n\nSET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;\nSET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;\nSET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';\n\n-- -----------------------------------------------------\n-- Schema mydb\n-- -----------------------------------------------------\nDROP SCHEMA IF EXISTS `mydb` ;\n\n-- -----------------------------------------------------\n-- Schema mydb\n-- -----------------------------------------------------\nCREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;\nUSE `mydb` ;\n\n-- -----------------------------------------------------\n-- Table `mydb`.`role`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `mydb`.`role` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`role` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `name` VARCHAR(45) NOT NULL,\n  PRIMARY KEY (`id`))\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `mydb`.`user`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `mydb`.`user` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`user` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `username` VARCHAR(45) NOT NULL,\n  `email` VARCHAR(45) NOT NULL,\n  `password` VARCHAR(45) NOT NULL,\n  `role_id` INT NOT NULL,\n  PRIMARY KEY (`id`, `role_id`),\n  INDEX `fk_user_role1_idx` (`role_id` ASC) VISIBLE,\n  CONSTRAINT `fk_user_role1`\n    FOREIGN KEY (`role_id`)\n    REFERENCES `mydb`.`role` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `mydb`.`action`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `mydb`.`action` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`action` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `name` VARCHAR(45) NOT NULL,\n  PRIMARY KEY (`id`))\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `mydb`.`access`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `mydb`.`access` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`access` (\n  `role_id` INT NOT NULL,\n  `action_id` INT NOT NULL,\n  PRIMARY KEY (`role_id`, `action_id`),\n  INDEX `fk_access_role1_idx` (`role_id` ASC) VISIBLE,\n  INDEX `fk_access_action1_idx` (`action_id` ASC) VISIBLE,\n  CONSTRAINT `fk_access_role1`\n    FOREIGN KEY (`role_id`)\n    REFERENCES `mydb`.`role` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_access_action1`\n    FOREIGN KEY (`action_id`)\n    REFERENCES `mydb`.`action` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `mydb`.`datafile`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `mydb`.`datafile` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`datafile` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `name` VARCHAR(45) NOT NULL,\n  `description` VARCHAR(45) NOT NULL,\n  `upload_date` DATE NOT NULL,\n  `file_type` VARCHAR(45) NOT NULL,\n  PRIMARY KEY (`id`))\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `mydb`.`file_collection`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `mydb`.`file_collection` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`file_collection` (\n  `datafile_id` INT NOT NULL,\n  `access_role_id` INT NOT NULL,\n  `access_action_id` INT NOT NULL,\n  PRIMARY KEY (`datafile_id`, `access_role_id`, `access_action_id`),\n  INDEX `fk_file_collection_datafile1_idx` (`datafile_id` ASC) VISIBLE,\n  INDEX `fk_file_collection_access1_idx` (`access_role_id` ASC, `access_action_id` ASC) VISIBLE,\n  CONSTRAINT `fk_file_collection_datafile1`\n    FOREIGN KEY (`datafile_id`)\n    REFERENCES `mydb`.`datafile` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_file_collection_access1`\n    FOREIGN KEY (`access_role_id` , `access_action_id`)\n    REFERENCES `mydb`.`access` (`role_id` , `action_id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\nSET SQL_MODE=@OLD_SQL_MODE;\nSET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;\nSET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;\n\n\nSTART TRANSACTION;\nUSE `mydb`;\nINSERT INTO `mydb`.`action` (`id`, `name`) VALUES (DEFAULT, 'UserAuth');\nINSERT INTO `mydb`.`action` (`id`, `name`) VALUES (DEFAULT, 'UserCreate');\nINSERT INTO `mydb`.`action` (`id`, `name`) VALUES (DEFAULT, 'DataDownload');\nINSERT INTO `mydb`.`action` (`id`, `name`) VALUES (DEFAULT, 'DataSearch');\nINSERT INTO `mydb`.`action` (`id`, `name`) VALUES (DEFAULT, 'DataUpload');\nINSERT INTO `mydb`.`action` (`id`, `name`) VALUES (DEFAULT, 'DataFilter');\nINSERT INTO `mydb`.`action` (`id`, `name`) VALUES (DEFAULT, 'DataDelete');\nCOMMIT;\n\nSTART TRANSACTION;\nUSE `mydb`;\nINSERT INTO `mydb`.`datafile` (`id`, `name`, `description`, `upload_date`, `file_type`) VALUES (DEFAULT, '/mnt/2022/ukraine_tax_stat', 'Stat about ukrainian taxpayers', '2022-10-02', 'csv');\nINSERT INTO `mydb`.`datafile` (`id`, `name`, `description`, `upload_date`, `file_type`) VALUES (DEFAULT, '/mnt/2022/poland_tax_stat', 'Stat about polish taxpayers', '2022-11-02', 'json');\nINSERT INTO `mydb`.`datafile` (`id`, `name`, `description`, `upload_date`, `file_type`) VALUES (DEFAULT, '/mnt/2022/ukr_crime_stat', 'Stat about crimerate in UKR', '2022-9-02', 'csv');\nINSERT INTO `mydb`.`datafile` (`id`, `name`, `description`, `upload_date`, `file_type`) VALUES (DEFAULT, '/mnt/2022/pol_crime_stat', 'Stat about crimerate in POL', '2022-8-02', 'json');\nCOMMIT;\n\nSTART TRANSACTION;\nUSE `mydb`;\nINSERT INTO `mydb`.`role` (`id`, `name`) VALUES (1, 'Guest');\nINSERT INTO `mydb`.`role` (`id`, `name`) VALUES (2, 'Administrator');\nINSERT INTO `mydb`.`role` (`id`, `name`) VALUES (3, 'Authorized user');\nCOMMIT;\n\nSTART TRANSACTION;\nUSE `mydb`;\nINSERT INTO `mydb`.`user` (`id`, `username`, `email`, `password`, `role_id`) VALUES (DEFAULT, 'tvytvytskyi', 'tvytvytskyi@gmail.com', '21232f297a57a5a743894a0e4a801fc3', 3);\nINSERT INTO `mydb`.`user` (`id`, `username`, `email`, `password`, `role_id`) VALUES (DEFAULT, 'odyshkantiuk', 'odyshkantiuk@gmail.com', '21232f297a57a5a743894a0e4a801fc3', 3);\nINSERT INTO `mydb`.`user` (`id`, `username`, `email`, `password`, `role_id`) VALUES (DEFAULT, 'diliyov', 'diliyov@gmail.com', '21232f297a57a5a743894a0e4a801fc3', 3);\nINSERT INTO `mydb`.`user` (`id`, `username`, `email`, `password`, `role_id`) VALUES (DEFAULT, 'omaksymenko', 'omaksymenko@gmail.com', '21232f297a57a5a743894a0e4a801fc3', 3);\nCOMMIT;\n")])])]),a("ul",[a("li",[n._v("RESTfull сервіс для управління даними")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("const express = require('express');\nconst bodyParser = require('body-parser');\nconst mysql = require('mysql');\n\nconst app = express();\nconst port = 3000;\n\n// Create a MySQL connection\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  port: '3306',\n  user: 'root',\n  password: 'password',\n  database: 'mydb',\n});\n\n// Connect to the database\nconnection.connect((err) => {\n  if (err) throw err;\n  console.log('Connected to the database.');\n});\n\napp.use(bodyParser.urlencoded({ extended: false }));\n//app.use(bodyParser.json());\n\n// Define routes\napp.get('/actions', (req, res) => {\n  // Fetch all users from the database\n  connection.query('SELECT * FROM action', (err, results) => {\n    if (err) throw err;\n    res.json(results);\n  });\n});\n\napp.get('/datafiles', (req, res) => {\n  // Fetch all users from the database\n  connection.query('SELECT * FROM datafile', (err, results) => {\n    if (err) throw err;\n    res.json(results);\n  });\n});\n\napp.get('/users', (req, res) => {\n  // Fetch all users from the database\n  connection.query('SELECT * FROM user', (err, results) => {\n    if (err) throw err;\n    res.json(results);\n  });\n});\n\napp.get('/roles', (req, res) => {\n  // Fetch all users from the database\n  connection.query('SELECT * FROM role', (err, results) => {\n    if (err) throw err;\n    res.json(results);\n  });\n});\n\n// req.query contains all params supplied in POST request\napp.post('/users', (req, res) => {\n  console.log(\"Debug print:\", req.query);\n  const { username, email, passwd, role_id } = req.query;\n  \n  // Insert a new user into the database\n  connection.query(\n    'INSERT INTO user (id, username, email, password, role_id) VALUES (DEFAULT, ?, ?, ?, ?)',\n    [username, email, passwd, role_id],\n    (err, results) => {\n      if (err) throw err;\n      res.json({ message: 'User created successfully!' });\n    }\n  );\n});\n\napp.post('/datafiles', (req, res) => {\n  console.log(\"Debug print:\", req.query);\n  const { name, description, upload_date, file_type } = req.query;\n  \n  // Insert a new user into the database\n  connection.query(\n    'INSERT INTO datafile (id, name, description, upload_date, file_type) VALUES (DEFAULT, ?, ?, ?, ?)',\n    [name, description, upload_date, file_type],\n    (err, results) => {\n      if (err) throw err;\n      res.json({ message: 'Datafile created successfully!' });\n    }\n  );\n});\n\napp.delete('/datafiles', (req, res) => {\n  console.log(\"Debug print:\", req.query);\n  const { name } = req.query;\n  \n  // Insert a new user into the database\n  connection.query(\n    'DELETE FROM datafile WHERE name=?;',\n    [name],\n    (err, results) => {\n      if (err) throw err;\n      res.json({ message: 'Datafile deleted successfully!' });\n    }\n  );\n});\n\napp.delete('/users', (req, res) => {\n  console.log(\"Debug print:\", req.query);\n  const { username } = req.query;\n  \n  // Insert a new user into the database\n  connection.query(\n    'DELETE FROM user WHERE username=?;',\n    [username],\n    (err, results) => {\n      if (err) throw err;\n      res.json({ message: 'User deleted successfully!' });\n    }\n  );\n});\n\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});\n\n\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);